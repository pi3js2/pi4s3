module brunerie_james where

-------------------------------------------------------
-- Lots of stuff copied from brunerie3.ctt (thanks!) --
-- new stuff starts on line 344                      --
-------------------------------------------------------

Path (A : U) (a0 a1 : A) : U = PathP (<i> A) a0 a1

compPath (A : U) (a b c : A) (p : Path A a b) (q : Path A b c) : Path A a c =
  <i> hcomp A (p @ i) [ (i =0) -> <j> a, (i = 1) -> q ]

data bool = false | true
data nat = zero | suc (n : nat)

idfun (A : U) (a : A) : A = a

pred : nat -> nat = split
  zero -> zero
  suc n -> n

data Z = pos (n : nat) | neg (n : nat)

zeroZ : Z = pos zero

data S1 = base1
        | loop1 <i> [ (i=0) -> base1
                    , (i=1) -> base1 ]

data S2 = base2
        | loop2 <i j> [ (i=0) -> base2
                      , (i=1) -> base2
                      , (j=0) -> base2
                      , (j=1) -> base2]

loopS1 : U = Path S1 base1 base1
loop : loopS1 = <i> loop1{S1} @ i

Square (A : U) (a0 a1 b0 b1 : A)
               (u : Path A a0 a1) (v : Path A b0 b1)
               (r0 : Path A a0 b0) (r1 : Path A a1 b1) : U
  = PathP (<i> (Path A (u @ i) (v @ i))) r0 r1

Sigma (A : U) (B : A -> U) : U = (x : A) * B x
refl (A : U) (a : A) : Path A a a = <i> a

constSquare (A : U) (a : A) (p : Path A a a) : Square A a a a a p p p p =
  <i j> hcomp A a [ (i = 0) -> <k> p @ (j \/ - k)
                  , (i = 1) -> <k> p @ (j /\ k)
                  , (j = 0) -> <k> p @ (i \/ - k)
                  , (j = 1) -> <k> p @ (i /\ k)]

fiber (A B : U) (f : A -> B) (y : B) : U =
  (x : A) * Path B y (f x)
isContr (A : U) : U = (x : A) * ((y : A) -> Path A x y)
prop (A : U) : U = (a b : A) -> Path A a b
set (A : U) : U = (a b : A) -> prop (Path A a b)

isEquiv (A B : U) (f : A -> B) : U = (y : B) -> isContr (fiber A B f y)

equiv (A B : U) : U = (f : A -> B) * isEquiv A B f

contrSingl (A : U) (a b : A) (p : Path A a b) :
  Path ((x : A) * Path A a x) (a,<_>a) (b,p) = <i> (p @ i,<j> p @ i/\j)

idIsEquiv (A : U) : isEquiv A A (idfun A) =
  \(a : A) -> ((a,<_>a),\(z : (x : A) * Path A a x) -> contrSingl A a z.1 z.2)

idEquiv (A : U) : equiv A A = (idfun A,idIsEquiv A)

ua (A B : U) (e : equiv A B) : Path U A B =
  <i> Glue B [ (i = 0) -> (A,e)
             , (i = 1) -> (B,idEquiv B) ]

rotLoop : (a : S1) -> Path S1 a a = split
  base1 -> <i> loop @ i
  loop1 @ i -> constSquare S1 base1 loop @ i

rot : S1 -> S1 -> S1 = split
  base1 -> \(y : S1) -> y
  loop1 @ i -> \(y : S1) -> rotLoop y @ i

-- Can this be simplified? The second argument is essentially propIsEquivDirect
isContrIdIsEquiv (A : U) : isContr (isEquiv A A (idfun A)) = (idIsEquiv A,goal)
  where
  goal (q : isEquiv A A (idfun A)) : Path (isEquiv A A (idfun A)) (idIsEquiv A) q =
    <i> \(y : A) -> (((q y).1.2 @ i,<j> (q y).1.2 @ i /\ j)
       ,\(w : (x : A) * Path A y x) ->
         <j> (hcomp A (w.2 @ i \/ j)
                      [(i=0) -> <_> w.2 @ j
                      ,(i=1) -> <k> ((q y).2 w @ j \/ -k).1
                      ,(j=0) -> <k> ((q y).2 w @ -k).2 @ i
                      ,(j=1) -> <_> w.1]
             ,<k> hcomp A (w.2 @ (i \/ j) /\ k)
                          [(i=0) -> <_> w.2 @ j /\ k
                          ,(i=1) -> <l> ((q y).2 w @ j \/ -l).2 @ k
                          ,(j=0) -> <l> ((q y).2 w @ -l).2 @ i /\ k
                          ,(j=1) -> <_> w.2 @ k
                          ,(k=0) -> <_> y
                          ,(k=1) -> <l> hfill A (w.2 @ i \/ j)
                                                [(i=0) -> <_> w.2 @ j
                                                ,(i=1) -> <k> ((q y).2 w @ j \/ -k).1
                                                ,(j=0) -> <k> ((q y).2 w @ -k).2 @ i
                                                ,(j=1) -> <_> w.1] @ l]))

-- Unfolded version inspired by redtt
rotIsEquiv_loop_alt_unf : PathP (<i> isEquiv S1 S1 (rot (loop @ i))) (idIsEquiv S1) (idIsEquiv S1) =
  <i> \(y : S1) -> hcomp (isEquiv S1 S1 (rot (loop @ i)))
            (transGen (<j> isEquiv S1 S1 (rot (loop @ i /\ j))) (-i) (idIsEquiv S1))
              [ (i=0) -> <_> idIsEquiv S1
              , (i=1) -> <i> (isContrIdIsEquiv S1).2 (transGen (<i> isEquiv S1 S1 (rot (loop @ i))) 0 (idIsEquiv S1)) @ -i] y

rotIsEquiv : (a : S1) -> isEquiv S1 S1 (rot a) = split
   base1 -> idIsEquiv S1
   loop1 @ i -> rotIsEquiv_loop_alt_unf @ i

square : Path (Path U S1 S1) (<_> S1) (<_> S1) =
  <i j> Glue S1 [ (i = 0) -> (S1, idEquiv S1)
                , (i = 1) -> (S1, idEquiv S1)
                , (j = 0) -> (S1, (rot (loop @ i), rotIsEquiv (loop @ i)))
                , (j = 1) -> (S1, idEquiv S1)
                ]

Hopf : S2 -> U = split
  base2 -> S1
  loop2 @ i j -> square @ i @ j

subst (A : U) (P : A -> U) (a b : A) (p : Path A a b) (e : P a) : P b =
  transGen (<i> P (p @ i)) 0 e

J (A : U) (a : A) (C : (x : A) -> Path A a x -> U)
  (d : C a (<_> a)) (x : A) (p : Path A a x) : C x p =
    subst ((x : A) * Path A a x) T (a,<_> a) (x, p) (contrSingl A a x p) d
      where T (z : (x : A) * Path A a x) : U = C (z.1) (z.2)

-------
-- We now need that S1 is a groupoid

-- I now do this by proving that loopS1 is a retract of Z, as Z is a
-- set this is also set. Previously the proof transported the proof
-- that Z is a set to loopS1 along the equivalence loopS1 ~= Z,
-- hopefully this proof will compute faster.

data N0 =

not (A : U) : U = A -> N0
efq (A : U) : N0 -> A = split {}

-- Z is a set using Hedberg
data or (A B : U) = inl (a : A)
                  | inr (b : B)

data Unit = tt

stable (A : U) : U = not (not A) -> A
const (A : U) (f : A -> A) : U = (x y : A) -> Path A (f x) (f y)

exConst (A : U) : U = (f:A -> A) * const A f
propN0 : prop N0 = \ (x y:N0) -> efq (Path N0 x y) x

propNot (A : U) : prop (not A) = \ (f g:not A) -> <i>\(x:A) -> (propN0 (f x) (g x))@i

dNot (A : U) (a : A) : not (not A) = \ (h : not A) -> h a

stableConst (A : U) (sA : stable A) : exConst A =
 (\ (x:A) -> sA (dNot A x),\ (x y:A) -> <i>sA (propNot (not A) (dNot A x) (dNot A y) @ i))

dec (A : U) : U = or A (not A)

decEqCong (A B : U) (f : A -> B) (g : B -> A) : dec A -> dec B = split
  inl a -> inl (f a)
  inr h -> inr (\ (b:B) -> h (g b))

decStable (A : U) : dec A -> stable A = split
 inl a -> \ (h :not (not A)) -> a
 inr b -> \ (h :not (not A)) -> efq A (h b)

discrete (A : U) : U = (a b : A) -> dec (Path A a b)

hedbergLemma (A: U) (a b:A) (f : (x : A) -> Path A a x -> Path A a x) (p : Path A a b) :
            Square A a a a b (<_> a) p (f a (<_> a)) (f b p) = <i> f (p @ i) (<j> p @ i /\ j)

hedbergStable (A : U) (a b : A) (h : (x : A) -> stable (Path A a x))
        (p q : Path A a b) : Path (Path A a b) p q =
 <j i> hcomp A a [ (j = 0) -> rem2 @ i
                 , (j = 1) -> rem3 @ i
                 , (i = 0) -> r
                 , (i = 1) -> rem4 @ j]
 where
   rem1 (x : A) : exConst (Path A a x) = stableConst (Path A a x) (h x)
   f (x : A) : Path A a x -> Path A a x  = (rem1 x).1
   fIsConst (x : A) : const (Path A a x) (f x) = (rem1 x).2
   rem4 : Square A a a b b (<_> a) (<_> b) (f b p) (f b q)  = fIsConst b p q
   r : Path A a a = f a (<_> a)
   rem2 : Square A a a a b (<_> a) p r (f b p) = hedbergLemma A a b f p
   rem3 : Square A a a a b (<_> a) q r (f b q) = hedbergLemma A a b f q

hedberg (A : U) (h : discrete A) : set A =
 \(a b : A) -> hedbergStable A a b (\(b : A) -> decStable (Path A a b) (h a b))

caseNat (A : U) (a0 aS : A) : nat -> A = split
 zero -> a0
 suc n -> aS

caseDNat (P:nat -> U) (a0 :P zero) (aS : (n:nat) -> P (suc n))
            : (n:nat) -> P n = split
 zero -> a0
 suc n -> aS n

znots (n : nat) : not (Path nat zero (suc n)) =
  \(h : Path nat zero (suc n)) -> subst nat (caseNat U nat N0) zero (suc n) h zero

snotz (n : nat) : not (Path nat (suc n) zero) =
  \(h : Path nat (suc n) zero) -> znots n (<i> h @ -i)

sucInj (n m : nat) (p : Path nat (suc n) (suc m)) : Path nat n m =
 <i> pred (p @ i)

discreteNat : discrete nat = split
 zero -> caseDNat (\(m : nat) -> dec (Path nat zero m)) (inl (<_> zero)) (\(m : nat) -> inr (znots m))
 suc n -> caseDNat (\(m : nat) -> dec (Path nat (suc n) m)) (inr (snotz n))
   (\(m : nat) -> decEqCong (Path nat n m) (Path nat (suc n) (suc m)) (\(p : Path nat n m) -> <i> suc (p @ i))
                  (sucInj n m) (discreteNat n m))

posNotneg (a b : nat) (h : Path Z (pos a) (neg b)) : N0 = subst Z T (pos a) (neg b) h tt
  where
  T : Z -> U = split
       pos _ -> Unit
       neg _ -> N0

negNotpos (a b : nat) (h : Path Z (neg b) (pos a)) : N0 = subst Z T (neg b) (pos a) h tt
  where
  T : Z -> U = split
       pos _ -> N0
       neg _ -> Unit

injPos (a b : nat) (h : Path Z (pos a) (pos b)) : Path nat a b =
 subst Z T (pos a) (pos b) h (<_> a)
 where
   T : Z -> U = split
        pos c -> Path nat a c
        neg _ -> N0

injNeg (a b : nat) (h : Path Z (neg a) (neg b)) : Path nat a b =
  subst Z T (neg a) (neg b) h (<_> a)
  where
    T : Z -> U = split
         pos _ -> N0
         neg c -> Path nat a c

discreteZ : discrete Z = split
  pos a -> split@((z1 : Z) -> dec (Path Z (pos a) z1)) with
             pos a1 -> let rem : dec (Path nat a a1) -> dec (Path Z (pos a) (pos a1)) = split
                             inl p -> inl (<i> pos (p @ i))
                             inr h -> inr (\(p : Path Z (pos a) (pos a1)) -> h (injPos a a1 p))
                       in rem (discreteNat a a1)
             neg b -> inr (posNotneg a b)
  neg b -> split@((z1 : Z) -> dec (Path Z (neg b) z1)) with
             pos a -> inr (negNotpos a b)
             neg b1 -> let rem : dec (Path nat b b1) -> dec (Path Z (neg b) (neg b1)) = split
                             inl p -> inl (<i> neg (p @ i))
                             inr h -> inr (\(p : Path Z (neg b) (neg b1)) -> h (injNeg b b1 p))
                       in rem (discreteNat b b1)

ZSet : set Z = hedberg Z discreteZ

predZ : Z -> Z = split
  pos u -> auxpredZ u
    where
    auxpredZ : nat -> Z = split
      zero  -> neg zero
      suc n -> pos n
  neg v -> neg (suc v)

sucZ : Z -> Z = split
  pos u -> pos (suc u)
  neg v -> auxsucZ v
    where
    auxsucZ : nat -> Z = split
      zero  -> pos zero
      suc n -> neg n

predsucZ : (x : Z) -> Path Z (predZ (sucZ x)) x = split
  pos u -> <_> pos u
  neg v -> lem v
   where
    lem : (u : nat) -> Path Z (predZ (sucZ (neg u))) (neg u) = split
      zero  -> <_> neg zero
      suc n -> <_> neg (suc n)

sucpredZ : (x : Z) -> Path Z (sucZ (predZ x)) x = split
  pos u -> lem u
   where
    lem : (u : nat) -> Path Z (sucZ (predZ (pos u))) (pos u) = split
      zero  -> <_> pos zero
      suc n -> <_> pos (suc n)
  neg v -> <_> neg v

-- alternative proof that sucZ is an equiv, not using the "grad lemma"

-- Maybe we can generalize the notion of being a set to allow
-- arbitrary paths on the sides and not just refl?
gengoal (A : U) (hA : set A) (x y : A) (p : Path A x y) : (z : A) (r : Path A y z) (q : Path A x z) ->
  PathP (<i> Path A x (r @ i)) p q =
  J A y (\(z : A) (r : Path A y z) -> (q : Path A x z) -> PathP (<i> Path A x (r @ i)) p q)
   (hA x y p)

ctr (y : Z) : fiber Z Z sucZ y = (predZ y,<i> sucpredZ y @ -i)

contr (y : Z) (y' : fiber Z Z sucZ y) : Path ((x : Z) * Path Z y (sucZ x)) (ctr y) y' =
    let p1 : Path Z (predZ y) y'.1 =
          compPath Z (predZ y) (predZ (sucZ y'.1)) y'.1
                   (<i> predZ (y'.2 @ i)) (predsucZ y'.1)
        prf1 : Path Z (sucZ (predZ y)) (sucZ y'.1) = <i> sucZ (p1 @ i)
        prf2 : Path Z y (sucZ (predZ y)) = <i> sucpredZ y @ -i
        p2 : PathP (<i> Path Z y (prf1 @ i)) prf2 y'.2 =
          gengoal Z ZSet y (sucZ (predZ y)) prf2 (sucZ y'.1) prf1 y'.2
    in <i> (p1 @ i,p2 @ i)

equivSucZ : isEquiv Z Z sucZ = \(y : Z) -> (ctr y,contr y)

sucPathZ : Path U Z Z = ua Z Z (sucZ,equivSucZ)

-- We now prove that "decode x (encode x p) = p" so that we get that
-- loopS1 is a retract of Z

-- Below is a direct definition of decode:

-- Covering space of the circle
helix : S1 -> U = split
  base1 -> Z
  loop1 @ i -> sucPathZ @ i

compS1 : loopS1 -> loopS1 -> loopS1 = compPath S1 base1 base1 base1
invLoop : loopS1 = <i> loop @ -i

encode (x : S1) (p : Path S1 base1 x) : helix x =
  subst S1 helix base1 x p zeroZ

winding (p : Path S1 base1 base1) : Z = encode base1 p



-----------------------------
-- Another Brunerie number --
-----------------------------

data JS1 = base
         | loops (x : JS1) <i> [ (i=0) -> x , (i=1) -> x ]

data JS2 = base
         | loops (x : JS2) <i j> [ (i=0) -> x , (i=1) -> x , (j=0) -> x , (j=1) -> x ]

data J3S1 = base
          | loop1 <i> [ (i=0) -> base , (i=1) -> base ]
          | funk <i j> [ (i=0) -> loop1{J3S1} @ j , (i=1) -> loop1{J3S1} @ j
                         , (j=0) -> loop1{J3S1} @ i , (j=1) -> loop1{J3S1} @ i
                         ]
          | whoa <i j k> [ (i=0) -> funk{J3S1} @ j @ k , (i=1) -> funk{J3S1} @ j @ k
                         , (j=0) -> funk{J3S1} @ i @ k , (j=1) -> funk{J3S1} @ i @ k
                         , (k=0) -> funk{J3S1} @ i @ j , (k=1) -> funk{J3S1} @ i @ j
                         ]
          -- | trunc...

-- TODO 2-truncate J3S1 so that this happens (then we will also
-- require the 2-truncation of S2 below)
funkyWhoa : PathP (<i> PathP (<j> PathP (<k> PathP (<l> J3S1) (whoa{J3S1} @ i @ j @ k) (whoa{J3S1} @ i @ j @ k)) (<l> whoa{J3S1} @ i @ j @ l) (<l> whoa{J3S1} @ i @ j @ l)) (<k l> whoa{J3S1} @ i @ k @ l) (<k l> whoa{J3S1} @ i @ k @ l)) (<j k l> whoa{J3S1} @ j @ k @ l) (<j k l> whoa{J3S1} @ j @ k @ l)
  = ?

opaque funkyWhoa

funky : (x : J3S1) -> Path J3S1 x x = split
  base -> <i> loop1{J3S1} @ i
  loop1 @ i -> <j> funk{J3S1} @ i @ j
  funk @ i j -> <k> whoa{J3S1} @ i @ j @ k
  whoa @ i j k -> <l> funkyWhoa @ i @ j @ k @ l

f1 : JS1 -> J3S1 = split
  base -> base
  loops x @ i -> funky (f1 x) @ i

-- TODO pretty easy
ccube : PathP (<i> PathP (<j> PathP (<k> S2) (loop2{S2} @ i @ j) (loop2{S2} @ i @ j)) (<k> loop2{S2} @ i @ k) (<k> loop2{S2} @ i @ k)) (<j k> loop2{S2} @ j @ k) (<j k> loop2{S2} @ j @ k)
  = ?
opaque ccube

f2 : J3S1 -> S2 = split
  base -> base2
  loop1 @ i -> base2
  funk @ i j -> loop2{S2} @ i @ j
  whoa @ i j k -> ccube @ i @ j @ k

anyRot (A : U) (h : (x : A) -> Path A x x) : Path (A -> A) (idfun A) (idfun A) = <i> \(x : A) -> h x @ i

-- adapted from rotIsEquiv_loop_alt_unf above
anyRotIsEquiv (A : U) (h : (x : A) -> Path A x x) : PathP (<i> isEquiv A A (anyRot A h @ i)) (idIsEquiv A) (idIsEquiv A) =
  <i> \(x : A) -> hcomp (isEquiv A A (anyRot A h @ i))
            (transGen (<j> isEquiv A A (anyRot A h @ i /\ j)) (-i) (idIsEquiv A))
              [ (i=0) -> <_> idIsEquiv A
              , (i=1) -> <i> (isContrIdIsEquiv A).2 (transGen (<i> isEquiv A A (anyRot A h @ i)) 0 (idIsEquiv A)) @ -i] x

global (A : U) (h : (x : A) -> Path A x x) : Path (Path U A A) (<_> A) (<_> A) =
  <i j> Glue A [ (i=0) -> (A, idEquiv A)
               , (i=1) -> (A, idEquiv A)
               , (j=0) -> (A, anyRot A h @ i, anyRotIsEquiv A h @ i)
               , (j=1) -> (A, idEquiv A)
               ]

Lopf : S2 -> U = split
  base2 -> JS1
  loop2 @ i j -> global JS1 (\(x : JS1) -> <k> loops{JS1} x @ k) @ i @ j

f3 (p : Path S2 base2 base2) : JS1 = transGen (<k> Lopf (p @ k)) 0 base

annoying : Path S2 base2 base2 = <i> f2 (f1 (f3 (<j> loop2{S2} @ i @ j)))

-- fixup empty comps :(
what : S1 = hcomp S1 (hcomp S1 (hcomp S1 (hcomp S1 base1 []) []) []) []
nudgeS1 (x : S1) : S1 = hcomp S1 x []
pudgeS1 (x : S1) : Path S1 (nudgeS1 x) x = <i> hfill S1 x [] @ -i
nudge4 : S1 = nudgeS1 (nudgeS1 (nudgeS1 (nudgeS1 base1)))
pudge4 : Path S1 base1 nudge4 = <i> hfill S1 (hfill S1 (hfill S1 (hfill S1 base1 [] @ i) [] @ i) [] @ i) [] @ i
cleanup (p : Path S1 nudge4 nudge4) : Path S1 base1 base1 =
  <i> hcomp S1 (p @ i) [(i=0) -> <j> pudge4 @ -j, (i=1) -> <j> pudge4 @ -j]

f4 (p : Path (Path S2 base2 base2) annoying annoying) : Z =
  winding (cleanup (<i> transGen (<j> Hopf (p @ i @ j)) 0 base1))

thing : Path (Path (Path S2 base2 base2) (<_> base2) (<_> base2)) (<i j> loop2{S2} @ i @ j) (<i j> loop2{S2} @ i @ j) =
  <j a b> hcomp S2 (loop2{S2} @ a @ b)
                [ (j=0) -> <i> loop2{S2} @ a @ b
                , (j=1) -> <i> loop2{S2} @ a @ b
                , (a=0) -> <i> loop2{S2} @ i @ j
                , (a=1) -> <i> loop2{S2} @ i @ j
                , (b=0) -> <i> loop2{S2} @ i @ j
                , (b=1) -> <i> loop2{S2} @ i @ j
                ]

n : Z = f4 (<i j> f2 (f1 (f3 (thing @ i @ j))))

-- > :n n
-- NORMEVAL: pos (suc (suc zero))
-- #hcomps: 0
-- Time: 0m0.017s
